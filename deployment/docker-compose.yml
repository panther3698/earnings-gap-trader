# Docker Compose configuration for Earnings Gap Trading System
# Production-ready containerized deployment

version: '3.8'

services:
  # Main Application
  app:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: earnings_gap_trader_app
    restart: unless-stopped
    depends_on:
      - db
      - redis
      - rabbitmq
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://trader:${DB_PASSWORD}@db:5432/earnings_gap_trader
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://trader:${RABBITMQ_PASSWORD}@rabbitmq:5672/
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
      - ./config:/app/config:ro
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: earnings_gap_trader_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: earnings_gap_trader
      POSTGRES_USER: trader
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - trading_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trader -d earnings_gap_trader"]
      interval: 30s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: earnings_gap_trader_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: earnings_gap_trader_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: trader
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: trading
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: earnings_gap_trader_nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./frontend/static:/usr/share/nginx/html/static:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: earnings_gap_trader_worker
    restart: unless-stopped
    command: celery -A core.celery_app worker --loglevel=info --concurrency=2
    depends_on:
      - db
      - redis
      - rabbitmq
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://trader:${DB_PASSWORD}@db:5432/earnings_gap_trader
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://trader:${RABBITMQ_PASSWORD}@rabbitmq:5672/
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "celery", "-A", "core.celery_app", "inspect", "ping"]
      interval: 60s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: earnings_gap_trader_scheduler
    restart: unless-stopped
    command: celery -A core.celery_app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      - db
      - redis
      - rabbitmq
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://trader:${DB_PASSWORD}@db:5432/earnings_gap_trader
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://trader:${RABBITMQ_PASSWORD}@rabbitmq:5672/
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - trading_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Flower for Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: earnings_gap_trader_flower
    restart: unless-stopped
    command: celery -A core.celery_app flower --port=5555
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_URL=amqp://trader:${RABBITMQ_PASSWORD}@rabbitmq:5672/
    env_file:
      - .env.production
    ports:
      - "5555:5555"
    networks:
      - trading_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: earnings_gap_trader_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - trading_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: earnings_gap_trader_grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - trading_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: earnings_gap_trader_backup
    restart: "no"
    depends_on:
      - db
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./docker/backup/backup.sh:/backup.sh:ro
    command: /backup.sh
    networks:
      - trading_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

# Networks
networks:
  trading_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local